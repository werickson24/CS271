// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//interface
	Mux16(a = false, b = instruction, sel = instruction[15],
		//jump
		out[0] = cJGT,
		out[1] = cJEQ,
		out[2] = cJLT,
		//dest
		out[3] = cDestM, out[3] = writeM,
		out[4] = cDestD,
		out[5] = cDestA,
		//comp
		out[6] = cCompNo,
		out[7] = cCompF,
		out[8] = cCompNy,
		out[9] = cCompZy,
		out[10] = cCompNx,
		out[11] = cCompZx,
		//comp a or type
		out[12] = cAMType,
		//type
		out[15] = cType
	);
	
    //use top bit for A/C instruction direction (instruction or Alu input)
	Mux16(a = instruction, b = ALUout, sel = cType, out = instructionout);
		
	//a m mux to alu
	Mux16(a = AregOut, b = inM, sel = cAMType, out = ammux);
	
	//check wether to load A
	Not(in = cType, out = notType);
	Or(a = notType, b = cDestA, out = loadA);
	
	//a register
	ARegister(in = instructionout, load = loadA, out = AregOut, out[0..14] = addressM);

	
	//d register
	DRegister(in = ALUout, load = cDestD, out = DregOut);
	
	
	ALU(
		x = DregOut,
		y = ammux,
		zx = cCompZx,
		nx = cCompNx,
		zy = cCompZy,
		ny = cCompNy,
		f = cCompF,
		no = cCompNo,
		out = ALUout,
		out = outM,
		zr = ALUoutzero,
		ng = ALUoutneg
	);
	//JGT setup
	Or(a = ALUoutzero, b = ALUoutneg, out = LTEQ);
	Not(in = LTEQ, out = GT);
	
	
	//jump and PC
	And(a = cJGT, b = GT, out = JGT);
	And(a = cJEQ, b = ALUoutzero, out = JEQ);
	And(a = cJLT, b = ALUoutneg, out = JLT);
	Or(a = JGT, b = JEQ, out = JGE);
	Or(a = JGE, b = JLT, out = JUMP);

	PC(in = AregOut, load = JUMP, inc = true, reset = reset, out[0..14] = pc, out[15] = false);
}